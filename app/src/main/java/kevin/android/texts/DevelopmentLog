----------------------------------------------------------------------------------------------------
PRE-PRE-ALPHA VERSION 0.0.0
-----------------------------------
How to Make Versions
Exporting to ZIP:
   File -> Export to Zip File
Importing a Zip:
   Unzip and Open -> your project

---------------------------------------------------------------
Version 1.0.0 - Version 1.0.1
Last edit on: October 2nd, 2020
Basic single message trading. Messages are loaded upon opening the chat.
---------------------------------------------------------------
[August 28th, 2020]
    - implemented Dialog and openDialog
    - user can now select an option and have it displayed in the EditText
    - still need to access MyMessages and display the proper full version
[August 29th, 2020]
    - app can now read messages and options from JSON
    - removed Room dependency
    - created Utils class to convert JSON strings to ArrayLists
    - missing dependent message functionality
[August 30th, 2020]
    - created message-trading algorithm (PlayThread)
    - NPC messages are sent after a delay
    - implemented game states
    - added dependent message feature
    - app can now run a simple conversation
[August 31st, 2020]
    - allowed last message to be sent and saved in Conversation.java using SharedPreferences
    - fixed app crashes related to game states and Dialogs
    - tried to implement saving/loading previously sent messages using SharedPreferences and Gson
    - completely removed any Room functionality
    - PlayThread is paused upon pausing ChatActivity
[September 1st, 2020]
    - successfully implemented saving & loading messages
    - modified Utils.java. get list methods shortened with use of get individual objects from JSONObjects
    - added getSavedMessagesFromJsonString which makes use of the above to return savedMessages
    - successfully implemented saving gamestate, so chat continues exactly as the user leaves it
    - created new temporary debug FloatingButton to test resetting the savedMessages and gamestate
[September 2nd, 2020]
    - tried to continuously update lastMessage. may need to scrap idea. currently, as ChatActivity pauses, so does the chat.
    - tried to make message updating dynamic. somehow the names are getting mixed up
[September 3rd, 2020]
    - made lastMessage update dynamic. upon returning to MainActivity, the correct Conversation is updated with the last message.
    - made profile picture only appear on the npcMessage that is lastMessageInGroup.
    - every ChatActivity is now completely separate from every other one
        - removed GameManager entirely. optionNum, currentNPCMessage, etc are now all fields of ChatActivity
        - every ChatActivity has its own sharedPreferences -> SAVE_TO, so every conversation has different saved messages
[September 4th, 2020]
    - started managing adding new Conversations
        - existing Conversations are now saved to sharedPreferences and reloaded when resuming
        - when the appropriate trigger point, the next Conversation is pulled from allConversations (and conversations.jsonc)
        - added a temporary debug FloatingButton to add the next conversation (simulate starting a new chapter)
[September 5th, 2020]
    - added profilePicture functionality -- however may need to modify
        - stored profilePictureID in JSON file instead of using R.drawable
        - send profilePicture data to ChatActivity and MessageAdapter
[September 6th, 2020]
    - profile picture now appears on every received NPCMessage, then disappears if a new one comes in
[September 7th, 2020]
    - increased loading efficiency; NPCMessages, Options, and MyMessages now only load in from the correct chapter
    - GameManager now keeps track of the current chapter
    - added name functionality; %name is replaced with any name
[September 9th, 2020]
    - add chapter functionality using GameManager; moving to the next chapter now triggers new messages and options
    - note on loading: messages/options are only loaded from the current chapter. parsing only stops if the chapter exceeds the
      current chapter. (any previous messages are still parsed, just not loaded)
[September 10th, 2020]
    - replaced chapter with group, now each chat has its own group, independent of other
    - completely removed GameManager functionality, current group is now a field in ChatActivity
[September 13th, 2020]
    - removed field sharedPreferences to save lastMessage; localized it in the method 'saveLastMessage'
[September 15th, 2020]
    - removed android:maxWidth on messages; maxWidth is now calculated at run time to account for varying screen sizes
    - added getAllItems() which updates ArrayList of all items. Called in onResume() and resetGame()
        - resetGame() now correctly restarts current conversation back to group 1
    - different conversations now load different npcMessages, myMessages and options
[September 18th, 2020]
    - refined Message JSON fields and data
        - replaced all chapterNum with groups
        - replaced boolean dependent with String type
    - added ActionMessages (extends NPCMessage) which displays an action
[September 19th, 2020]
    - app now correctly rebuilds action messages
    - added Sent, Delivered, Read icons for my messages
    - added typing animation when "npc" state begins
    - minor refinements to layout files
[September 24th, 2020]
    - vastly improved loading times
        - allItems now loads starting from currentNPCMessage/optionNum
        - turned allItems into a queue. messages are popped out when needed
    - improved JSON files
        - groups are now organized as a 2D array under the name
        - removed the need to check for the correct group (removed keepParsing)
[September 26th, 2020]
    - improved reading and writing choices
        - removed choices from JSON file, now Utils has a try-catch block
        - applyText no longer sets the choice for upcoming npcMessage. this is done in playThread
        - npcMessage choice is now set in "npc" gamestate in PlayThread
[September 27th - October 1st 2020]
    - worked towards adding key decision functionality
    - minor JSON and Utils edits
---------------------------------------------------------------
Version 1.1.0
Last edit on: October 14th, 2020
Adding message blocks functionality.
---------------------------------------------------------------
[October 4th, 2020]
    - allMessages are now saved upon leaving the chat, and rebuilt upon returning
    - changed getAllItems to getNewItems
[October 7th, 2020]
    - combined extracting allItems from start with extracting allItems fromSaved
    - minor improvements to Utils
    - added message blocks; message blocks can now be referenced in JSON using type "variationBlock"
[October 9th, 2020]
    - improved getAllItems; now there are 2 separate methods for file->string and string->arraylist
    - requesting message blocks now appends to the top of the arraylist
    - successfully implemented message blocks
[October 10th, 2020]
    - minor improvements to PlayThread
    - message blocks are now successfully triggered by a choice
[October 13th, 2020]
    - message block decision no longer require multiple files; now just 1 for the block
    - minor improvements to Options (applying key decisions, remove after send button is clicked)
    - message blocks can successfully rebuild and load, so long as MainActivity isn't killed
[October 14th, 2020]
    - blocks Hashtable is now saved between MainActivity lifecycle changes
---------------------------------------------------------------
Version 1.1.1
Last edit on: December 17, 2020
[GROUP 4]: Tests a large amount of messages.
---------------------------------------------------------------
[October 17-18th, 2020]
    - story improvements; added group 4
[October 24th, 2020]
    - worked on changing themes

[December 6th, 2020]
    - revisited project after month hiatus
    - improved style colours
    - added menu into ChatActivity
[December 8th, 2020]
    - theme now successfully changes after calling recreate, only affecting messages and dialogs
[December 17th, 2020]
    - want to remove unnecessary code: currentNPCMessage, optionNum and group field from messages
---------------------------------------------------------------
Version 1.2.0
Last edit on: December 17, 2020
Removing unnecessary code.
---------------------------------------------------------------
[December 17th, 2020]
    - added extra documentation
    - removed group field from Message/NPCMessage/MyMessage/ActionMessage
    - removed currentNPCMessage and optionNum
---------------------------------------------------------------
Version 1.2.1
Last edit on: December 20, 2020
Revamping MainActivity, conversation loading, and communication between MainActivity and ChatActivity
---------------------------------------------------------------
[December 17th, 2020]
    - removed allConversations. storing two arraylists is wasteful.
        - new Conversations are requested when needed -- this way we don't need to parse 2 json files every time when the app starts
    - removed chatlist. storing name of json file is useless.
    - profilePictures are no longer hard coded. added the HashTable visuals which stores the style and profilePicture for each Conversation
        - style can now be customized for each Conversation. style covers entire app, so style is done.
[December 18th, 2020]
    - replaced startActivity with startActivityForResult. (changed ViewHolder in ConversationAdapter to non-static)
        - lastMessage, profilePictureID, styleID, name and active status are now passed back to MainActivity
        - Conversation fields are updated upon returning to MainActivity and reloaded
        - lastMessage now works without sharedPreferences. removed saving/loading process from ChatActivity and MainActivity
        - styleID and profilePictureID are now stored within the Conversation and sent to ChatActivity
        - ChatActivity no longer saves lastMessage to sharedPreferences (removed saveLastMessage())
    - style can be changed if the Activity leaves, and restarted using an intent
[December 19th, 2020]
    - tried to get styles to apply through intents and within the activity
[December 20th, 2020]
    - giving up on styles for now. style can be changed through intent.
    - style and color xml improvements
    - most active conversation now appears on the top
---------------------------------------------------------------
Version 1.3.0
Last edit on: December 25, 2020
Automatic group advancing. Controlled by GameManager
---------------------------------------------------------------
[December 20th, 2020]
    - group is no longer saved by ChatActivity, instead is passed from MainActivity by intent.
        - removed SharedPreferences. all functions are normal.
[December 21st, 2020]
    - tested automatic group advancement
    - added chatState to ChatActivity
        - made loadState() more readable
        - chatState and passed back to MainActivity and sent back
        - all functions normal
[December 22nd, 2020]
    - tested blocks which are triggered across different chats and groups. works as intended.
    - nextGroup now increments and finishes the current chat (so twice incrementation)
    - blocks can be called by multiple chats. christmas key decision is now used both by npc1 and npc2.
    - christmas block now does the reverse choice for market and park
[December 23rd, 2020]
    - implemented automatic chat advancement
[December 24th, 2020]
    - tried to implement ViewModel/LiveData
[December 25th, 2020]
    - removed implementation of ViewModel/LiveData
---------------------------------------------------------------
Version 1.4.0
Last edit on: December 28, 2020
Note fragments.
---------------------------------------------------------------
[December 27th, 2020]
    - tested note fragments.
    - Strings can now be passed to NoteFragments.
[December 28th, 2020]
    - worked on hiding soft keyboard in NoteFragment
    - fragment closes with two consecutive taps
    - keyboard hides when NoteFragment is opened
    - SupportActionBar is hidden in fragment and showed upon returning to ChatActivity
---------------------------------------------------------------
Version 1.5.0
Last edit on: December 30, 2020
EditTextDialogs.
---------------------------------------------------------------
[December 30th, 2020]
    - implemented EditTextDialogs.
    - Redacted EditTextDialogs.
    - all functions normal.
    - independent npc messages should be able to follow dependent npc messages
---------------------------------------------------------------
Version 1.6.0
Last edit on: December 30, 2020
Beginning setup.
---------------------------------------------------------------
[December 30th, 2020]
    - added EditTextDialog and its layout back
    - added setup() method
    - EditTextDialogs work properly in receiving names and nicknames
    - Dialogs work in choosing gender
    - fixed crash relating to initVisuals() functioning by name. now functions by id.
---------------------------------------------------------------
Version 1.6.1
Last edit on: January 4, 2021
Updating Utils and JSON files to function by id, not name. Beginning setup. ChatInfoFragment.
---------------------------------------------------------------
[December 31st, 2020]
    - improvements to JSON files
        - removed reliance on name, now by id
        - refined AlertDialogs to setup names
        - added comments to AlertDialogs
        - conversation id is now sent to ChatActivity
    - chats can now function properly with custom names
    - GameManager fields are now all saved, so AlertDialogs only appear on first run
    - removed gender customization for now
[January 1st, 2021]
    - added new json file to setup name info
    - created ChatInfoFragment
    - updated EditTextDialog constructor to only take a string array rather than 8 strings
    - removed applyNameInfo and split into 4 separate methods, in preparation that names can be changed from fragments
    - refined ChatInfoFragment layout files
[January 2nd, 2021]
    - simplified changing names in ChatInfoFragment -- now only EditTexts are used
    - names are now passed to ChatInfoFragment
    - name and nickname are successfully updated across MainActivity and ChatActivity
    - removed MainActivity's dependency on names
[January 3rd, 2021]
    - finished beginning setup. later conversations' names can be updated due to additions in requestNextConversation()
    - tried implementing changing activity backgrounds.
[January 4th, 2021]
    - refined background animations, now works as intended
---------------------------------------------------------------
Version 1.7.0
Last edit on: January 9th, 2021
Background and sound effect Triggers.
---------------------------------------------------------------
[January 4th, 2021]
    - added BackgroundMessage.
        - PlayThread can now receive BackgroundMessages and update accordingly
        - added new field bgState to Conversation
        - bgState is sent back to MainActivity so bgState is saved across activity deaths
[January 5th, 2021]
    - added sound effects. automatically triggered.
    - NoteFragments can now go through multiple pages of text.
[January 9th, 2021]
    - tested MediaPlayer
---------------------------------------------------------------
Version 1.8.0
Last edit on:
Revisiting and rethinking things.
    - why is ChatActivity responsible for saving messages? Why don't we just send it back to MainActivity
      using onActivityResult?
    - why can't we pause the playThread while NoteFragment is open? Consider just removing the NoteFragment as a whole
    - should fix NPCMessage json fields. We can combine the booleans into one integer code and we can add
      a typing timer to each. We can also add a timestamp to each MyMessage
---------------------------------------------------------------
[April 20th, 2021]
    - ChatActivity is no longer responsible for saving messages:
        - removed all use of SharedPreferences in ChatActivity
        - all data is now sent back to MainActivity to update the corresponding Conversation
        - this fixes the bug where multiple chats in chatState paused will incorrectly transfer saved messages
        - removed onStop()
        - ConversationAdapter is now responsible for sending jsonStrings to ChatActivity. ChatActivity only decodes it
    - removed NoteFragment
        - too expensive and difficult to organize
[April 21st, 2021]
    - each MyMessage now displays a predetermined timestamp
    - re-added a BackgroundMessage to the JSON file. Commented out.
    - removed lastMessageInGroup and lastMessageInConversation
        - replaced it with control: continue, pause or stop
    - fixed bug where leaving turing typingAnim caused the next Message to be skipped
[April 22nd, 2021]
    - worked on updating remaining JSON files to new version
[April 23rd, 2021]
    - fixed all bugs relating to updated JSON files
    - added AudioMessage functionality | start and stop
    - renamed "state" to "gameState"
[April 25th, 2021]
    - made Background fade out as well
    - re-implemented NoteMessages using TextViews instead of a Fragment
        - exiting a NoteMessage halfway through results in the Note starting over
        - displayNote() added to ChatActivity
        - minor modifications to npc json files (replaced field content with noteContent)
        - keyboard and actionBar are hidden properly
[April 30th, 2021]
    - started removing Conversation fields and constants from ChatActivity
[May 1st, 2021]
    - all Conversation fields removed
    - removed Bitmap field from Conversation
[May 2nd, 2021]
    - removed name and nickname fields
        - removed relevant lines from ChatActivity, MainActivity and ConversationAdapter
    - fixed fatal crash
    - no longer manually parse a Conversation object -- we can use GSON
TODO:
    - info card for ChatActivity
        - u can also put little icons that describe the character (age, grade, gender,etc)
    - final additions!
        - improve Triggers and npcMessages (redundant abstract class for BackgroundMessage, NoteMessage)
    - what if we run out of memory? for allMessages, are we only storing the relevant messages for the group and person?
    - saving messages does not work when we press home D:
Requires Further Testing
    - general bug where leaving during typing animation causes next npc message to not show up [UPDATE: should be ok now]
    - weird stuff happens when we try to advance the group while the PlayThread is running. NullPointerException and
      OutOfBoundsException are possible [UPDATE: just don't advance unless thread is frozen]
    - advancing groups automatically is a bit funky -- sometimes it only works when the chat is entered then exited,
      despite being at the correct story trigger point [UPDATE: should be ok now.]

General Notes
    What we are doing is fine. GSON -> JSON -> SharedPreferences is okay.
    If we want SQL/Room, then follow "Single Class Inheritance" -- one table with all columns of
    both independent and dependent NPC messages. We just need to check the type.
    We will need 3 tables, npc, my, and option.
----------------------------------------------------------------------------------------------------
FULL REBUILD USING MVVM ARCHITECTURE:
----------------------------------------------------------------------------------------------------
[Tuesday, August 17th, 2021]
    - Room architecture works (DAO, Repository, Database w/ pre-populating)
[Wednesday, August 18th, 2021]
    - MainActivity observes LiveData for sentMessages and upcomingMessages
    - working recycler view with two ViewHolder types: NPCMessage and MyMessage
    - started working on PlayThread
        - NPC messages are loaded immediately
        - My messages are loaded in after button click on sendButton
        - no more messages are loaded by the end of the group
[Thursday, August 19th, 2021]
    - ConversationFragment now successfully navigates to ChatFragment and sends a Conversation object
[Friday, August 20th, 2021]
    - MessageDatabase is now pre-populated using JSON asset
    - conversations now select the appropriate messages
[Sunday, August 22nd, 2021]
    - replaced PlayThread with PlayRunnable
        - fixed issue with the Runnable -- thought there was a problem with database pre-populating, but
          it was due to many PlayThreads being instantiated
[Monday, August 23rd, 2021]
    - Conversation can now be sent back from ChatFragment to ConversationFragment
    - corresponding Conversation object now updated in the ConversationDatabase
[Tuesday, August 24th, 2021]
    - fixed issue where different conversations loaded the same messages of player 1
    - fixed issue where messages of player 2 would not render to the screen
    - fixed Runnable timing issues (messages would sometimes load in at the wrong time)
[Wednesday, August 25th, 2021]
    - conversation can now update the last message live using SharedViewModel
    - last message is bolded if it belongs to an npc
[Thursday, August 26th, 2021]
    - tried these, but ended up removing them:
        - changed all "state" to "conversation.getChatState()" in ChatFragment, but this caused an issue where
          if the chat was left on "choose," the PlayRunnable would never assign the next message
        - made the SharedViewModel store the only instance of the conversation in chat, but updating fields
          of an object does not count as an update to LiveData
    - implemented groups
    - removed sending conversation object back to ConversationFragment and the observer of the lastMessage field
        - ConversationFragment now only observes the active conversation object
        - this observer updates the group number and the last message
[Saturday, August 28th, 2021]
    - tried to fix the issue of when to create new Threads, without success
    - the plan is now to freeze the thread every time the fragment is closed
    - Thread now freezes whenever the Fragment is closed
    - a new one is created whenever the fragment opens
[Sunday, August 29th, 2021]
    - implemented ChatInfoFragments and Menu
    - first and last name can now be updated and saved
    - fixed a bug where PlayRunnable did not start when ChatFragment was opened
    - started working on blocks
        - if a key my message is found, save the decision to GameManager and save the block to return to
        - if a block comes, get the saved decision from GameManager
        - update the Conversation's current block
        - if the block ends, return to the original block (if any)
[Tuesday, August 31st, 2021]
    - tried getting blocks to work:
        - if we come across a block, update a LiveData field in the messageViewModel
        - this will then fetch the upcoming messages again
        - some messages after the block may come in while the block is loading; implemented a stall (not tested)
[Wednesday, September 1st, 2021]
    - worked on blocks.
        - added LiveData current block to sentMessages
        - added preceding blocks List in GameManager
            - moved this to the individual conversation
        - added a currentBlocks stack to conversation, implemented using a List<>
            - added a TypeConverter for it
            - blocks can now be successfully loaded and displayed
        - removed the filtering by block for getSentMessages in messageDao
[Thursday, September 2nd, 2021]
    - blocks now work properly!
    - fixed issue where block would not load if chat was closed right before the block message
    - TODO: remember to reset the currentBlocks if the conversation is DONE
[Friday, September 3rd, 2021]
    - conversations now load from JSON file
    - temporarily removed recentValue for conversations
    - added action button to add new conversation
    - GameManager's key decisions are now saved and reloaded from SharedPreferences
    - can now set up all player names (this happens every time)
[Sunday, September 12th, 2021]
    - todo: fix bug where setup does not properly load only on first run
    - started working on adding typing animation
        - had to make the message adapter global scope inside ChatFragment
        - also tried making refresh more efficient; if only one new message is added, use notifyItemChanged.
            - if there is a size change > 1, notifyDataSetChanged.
[Tuesday, September 14th, 2021]
    - improved efficiency of updating messages inside recycler view
        - start/stop typing anim is updated using notifyItemInserted/notifyItemRemoved
        - so are the basic messages
[Friday, September 17th, 2021]
    - made chat recycler view populate from the bottom
        - also automatically jumps down if currently at the bottom of the chat
    - limited NPC message and my message max length using a quick & dirty method
[Monday, September 20th, 2021]
    - added jump down button
    - recycler view now scrolls down when keyboard is opened
[Tuesday, September 21st, 2021]
    - added sound effects for sending message and receiving message
[Friday, September 24th, 2021]
    - added profile pictures on Conversation rows and chat message rows
    - updated volume for receiving a message
[Saturday, September 25th, 2021]
    - discovered cause of recycler view bug; just don't have a large message at the length of the screen
[Sunday, September 26th, 2021]
    - removed loadSentMessages in MessageViewModel; only need getSentMessages
    - cleaned up outdated methods and imports
    - added action messages
    - added npc typing sound
[Tuesday, September 20th, 2021]
    - started working on notes
[Wednesday, October 6th, 2021]
    - fixed bug where next note prompt displayed incorrectly
    - support action bar is now hidden during note
    - notes are now fully functional
[Saturday, October 9th, 2021]
    - started working on an automated group advancement system
[Monday, October 11th, 2021]
    - added quick-group-finish button for testing
    - re-added last message updating -- must have been removed by accident
    - cannot reproduce bug where leaving during typing anim causes inconsistency. marking as resolved
    - cannot reproduce bug where the incorrect group advancement command was executed. marking as resolved
    - likely fixed bug where an inconsistency occurred after the note finished (note now finishes properly)
[Thursday, October 12th, 2021]
    - fixed bug where incrementing group via checkAdvance did not apply when re-entering the chat. by calling notifyDataSetChanged
    - fixed bug where AppCompatActionBar couldn't hide by moving it to the main thread
    - decrease fadeIn and fadeOut animation time
    - started working on backgrounds
    - remove unnecessary lines of code about checking if playRunnable is null
[Saturday, October 30th, 2021]
    - finished implementing backgrounds -- but slow and not tested
    - discovered big inconsistency bug: it is caused by our group skip button
        - fix this next time
[Tuesday, November 30th, 2021]
    - we back
    - tested backgrounds, still slow. will learn the debugger next
[Tuesday, May 2nd, 2022]
    - wrote out entire script for player 1 group 1
    - did some basic testing. looks like the group advancement algorithm is still glitchy
[Sunday, May 9th, 2022]
    - removed background functionality (too hard to maintain)
    - need to fix group advancement. added 2 lines to update conversation state but it's not really tested (commented with 'not tested')
[Thursday, May 20th, 2022]
    - re-familiarized myself with the code
        - still not sure why we need getUpcomingMessages and loadUpcomingMessages
    - figured out the bug that was happening when the note finished. there was a logic error in the playthread that started submitting
       new messages as soon as the note was submitted. probably just happening too fast
[Sunday, May 22nd, 2022]
    - bug: the first click on a note fragment does not bring up the "Next" text. I'm guessing it has something to do with switching focus
        to the fragment (ignoring for now)
    - investigated the group incrementing bug. because conversation is set to STATE_DONE, loading the next command. need to pause it.
        - need to check if the STATE_PAUSED is being set. if so, don't set to STATE_DONE when the chat is "finished"
        - Solved: getTag was getting an outdated version of the Conversation. Switched to a position-based click handler
    - the weird bug when the note closes still happens. it's hard to reproduce. IF ALL ELSE FAILS: just change notifyItemInserted to notifyDataSetChanged in typingAnim
        - moving on for now. it's hard to reproduce and i'm not sure what's causing it besides complicated ideas of multithreading
[Tuesday, May 24th, 2022]
    - i now believe the note inconsistency is caused because both the UI thread and the play thread are modifying the recyclerview data. i moved the submitMessage call out of
        displayNote() and is now called in the playthread
        - continue to test it. not sure if it works
    - tested blocks. they work well
    - updated conversation unread state when chat endstu
[Wednesday, May 25th, 2022]
    - fixed AVD waiting for debugger to attach issue, using a cold boot
    - re-enabled first-run dialogs
        - fixed issue where the dialogs only appear on second run
[Saturday, May 28th, 2022]
    - tried getting smiling face with tear emoji encoded in the project
        - it has unicode U+1f972 but Android can't render a 5-digit unicode
        - tried using https://stackoverflow.com/questions/19557026/how-to-display-5-digit-unicode-characters-such-as-a-speaker-u1f50a
            and http://www.russellcottrell.com/greek/utilities/SurrogatePairCalculator.htm but it does not work
        - now i'm thinking that android just can't support these emoijs, may need a textview that supports emojis like https://stackoverflow.com/a/49512524
TODO: finalize what causes the weird desync between open/incr commands. i've only seen it appear when re-building the app, but just make sure it doesn't happen by the user
    (ex. closing the app when the chat is done instead of going back to ConversationFragment)
[Sunday, May 29th, 2022]
    - finally figured out how to display 5-digit unicode emojis
        - added bundled-emoji dependency & init in MainActivity
    - i think i figured out why the edit text dialog were appearing at the wrong times
        - no need to observe all conversations; overlapping observers caused difficult-to-track behaviour
[Tuesday, May 31st, 2022]
    - added group 2 into json format
[Wednesday, June 1st, 2022]
    - confirmed that an independent npc message can follow a mymessage
[Thursday, June 9th, 2022]
    - added some more groups
[Monday, June 13th, 2022]
    - Updated ChatInfoFragment
        - removed nicknames, added descriptions and profile pictures
    - added customize player information (saved to shared preferences)
    - added timestamps
[Tuesday, June 14th, 2022]
    - added name placeholder replacements
[Thursday, June 16th, 2022]
    - added settings fragment
        - updated navigation
        - added player name update
    - replaced custom shared preferences with PreferenceManager default shared preferences for consistency
       between settings and GameManager
[Sunday, June 19th, 2022]
    - added "Schism" title on ConversationFragment, and "Character Information" on ChatInfoFragment
    - added name placeholders replacements in ChatInfoFragment description
    - tried updating conversation object from ChatFragment, since names were not being updated if the user closed the app without going back to
       ConversationFragment
        - too complicated to fix. is possible with storing name in shared preferences, and updating conversation object on reload, but too much work
        - also makes a small bug: if name is updated, then app is swiped up, since GameManager is updated, the description and naming will use new name, but
           just the display will use old name (since conversation object is not updated)
[Friday, June 24th, 2022]
    - wrote a bunch more groups
[Monday, June 27th, 2022]
    - tested fast mode. looks good
    - fixed bug where note exit animation restarts if user clicks on the screen during animation
    - tried out the game with 314 messages. load time is pretty fast.
    - updated NPCMessage layout to display timestamp on top of the message
        - can toggle timestamp between Visible and Gone
        - there is an animation for that message only, but not for other messages. tried but failed
[Monday, July 4th, 2022]
    - updated block encoding system. block type is now of the form key_<first_block_id>_<block_name>
        - this should allow us to access block within existing blocks
        - tested nested blocks. looks like it works!
[Thursday, July 7th, 2022]
    - tried adding unconditional blocks
        - luckily, unconditional blocks are not globally accessed across multiple groups, else we need to store the json in a separate file or something
        - but, getting sent messages currently is ordered by id (the order in the json file)
[Friday, July 8th, 2022]
    - finished unconditional blocks. it is a little unstable, i think because the thread may try to add block 0 items after a block has just been popped,
       before they are loaded in
        - it works okay in the normal run, but not during debugging
    - implemented complex blocks requiring two decisions
        - tested on normal run, works well
    - implemented conditional group advancing
        - added increment instructions ternary operator
        - TODO: find a better solution to the "\r" problem. the last instruction has an unwanted newline character at the end
    - QOL changes:
        - the next conversation the user is supposed to open is now labeled with "New message!"
            - bug: the first time Ax's conversation is closed, it still reads "New message!"
        - Also updated Conversation's timestamp to the time of the last message that was sent
        - Conversation's that return with a state of paused are now set unread=false
[Wednesday, August 3rd, 2022]
    - finished message json!
    - added remaining conversations (police and ???)
    - upgraded EditTextDialog setup; now conversations.json comes with a title for the dialog
        - also only certain conversations can be edited (can't edit police and ???)
[Thursday, August 12th, 2022]
    - proofread message json
    - added last name replacement and generalized replacement to affect all content of all messages
    - replace == 5 comparison in ConversationFragment with automatic file check



TODO
    - backgrounds and mediaplayer sounds
    - loading screen when populating conversations/messages
    - looks like name replacement isn't working properly in my messages <-- fixed?
    - in conversationfragment we are checking if inactive conversation .length ==3 (don't do this, store in a config file somewhere)
    - last name replacement


Things to check at the end:
    - check if messages & conversation state are saved if the user leaves by closing the app instead of returning to the ConversationFragment
        - messages are saved. i think conversations might be okay too, since it will just open the chat with state RUNNING, then set to DONE when there are no more upcoming messaegs
        - VERDICT: Messages are saved. Conversation preferences (name, bgState) are NOT saved. Conversation state works out nicely since states are managed in ConversationFragment
    - check if we are waiting for ALL messages to be unpacked from JSON before our first chat starts. If so, it may take a while -- loading screen may be needed